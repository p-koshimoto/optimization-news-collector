import arxiv
import feedparser
import requests
from datetime import datetime, timedelta
import json
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders
import os
import sys
import pytz

class OptimizationNewsCollector:
    def __init__(self):
        # Áí∞Â¢ÉÂ§âÊï∞„Åã„ÇâË®≠ÂÆö„ÇíÂèñÂæó
        self.recipient_email = os.getenv('RECIPIENT_EMAIL')
        self.sender_email = os.getenv('SENDER_EMAIL')
        self.sender_password = os.getenv('GMAIL_APP_PASSWORD')
        self.discord_webhook = os.getenv('DISCORD_WEBHOOK')
        
        # Êó•Êú¨ÊôÇÈñì„ÅÆ„Çø„Ç§„É†„Çæ„Éº„É≥Ë®≠ÂÆö
        self.jst = pytz.timezone('Asia/Tokyo')
        
    def get_jst_time(self):
        """ÁèæÂú®„ÅÆÊó•Êú¨ÊôÇÈñì„ÇíÂèñÂæó"""
        return datetime.now(self.jst)
    
    def collect_arxiv_papers(self, days_back=1):
        """arXiv„Åã„ÇâÊï∞ÁêÜÊúÄÈÅ©ÂåñÈñ¢ÈÄ£Ë´ñÊñá„ÇíÂèéÈõÜ"""
        print("üìö arXiv„Åã„ÇâË´ñÊñá„ÇíÂèéÈõÜ‰∏≠...")
        
        try:
            # „Çà„ÇäÂÖ∑‰ΩìÁöÑ„Å™Êï∞ÁêÜÊúÄÈÅ©ÂåñÈñ¢ÈÄ£„ÅÆ„ÇØ„Ç®„É™
            client = arxiv.Client()
            search = arxiv.Search(
                query=(
                    "cat:math.OC OR "
                    "(cat:cs.DM AND (ti:optimization OR ti:programming OR ti:algorithm)) OR "
                    "(cat:stat.ML AND ti:optimization) OR "
                    "ti:„Äålinear programming„Äç OR ti:„Äåinteger programming„Äç OR "
                    "ti:„Äåconvex optimization„Äç OR ti:„Äånonlinear programming„Äç OR "
                    "ti:„Äåcombinatorial optimization„Äç OR ti:„Äåstochastic optimization„Äç"
                ),
                max_results=20,
                sort_by=arxiv.SortCriterion.SubmittedDate,
                sort_order=arxiv.SortOrder.Descending
            )
            
            papers = []
            cutoff_date = self.get_jst_time().date() - timedelta(days=days_back)
            
            for result in client.results(search):
                # Êó•Êú¨ÊôÇÈñì„Åß„ÅÆÊó•‰ªòÊØîËºÉ
                published_jst = result.published.astimezone(self.jst).date()
                if published_jst >= cutoff_date:
                    papers.append({
                        'title': result.title.replace('\n', ' ').strip(),
                        'authors': [author.name for author in result.authors[:3]],
                        'abstract': result.summary.replace('\n', ' ').strip()[:500] + "...",
                        'url': result.entry_id,
                        'published': published_jst.strftime('%Y-%m-%d'),
                        'categories': result.categories
                    })
            
            print(f"‚úÖ Ë´ñÊñá {len(papers)} ‰ª∂„ÇíÂèéÈõÜ„Åó„Åæ„Åó„Åü")
            return papers
            
        except Exception as e:
            print(f"‚ùå arXivÂèéÈõÜ„Ç®„É©„Éº: {e}")
            return []
    
    def collect_news_from_rss(self):
        """RSS„Åã„ÇâÊúÄÈÅ©ÂåñÈñ¢ÈÄ£„Éã„É•„Éº„Çπ„ÇíÂèéÈõÜÔºà„Éï„Ç£„É´„Çø„É™„É≥„Ç∞Âº∑ÂåñÔºâ"""
        print("üì∞ „Éã„É•„Éº„Çπ„ÇíÂèéÈõÜ‰∏≠...")
        
        # Êï∞ÁêÜÊúÄÈÅ©Âåñ„Å´„Çà„ÇäÈñ¢ÈÄ£ÊÄß„ÅÆÈ´ò„ÅÑRSS„ÇΩ„Éº„Çπ
        rss_urls = [
            "https://rss.cnn.com/rss/edition_technology.rss",
            "https://feeds.reuters.com/reuters/technologyNews",
            "https://rss.slashdot.org/Slashdot/slashdotMain",
            "https://feeds.feedburner.com/oreilly/radar"
        ]
        
        # „Çà„ÇäÂé≥ÂØÜ„Å™„Ç≠„Éº„ÉØ„Éº„Éâ„Éï„Ç£„É´„Çø
        optimization_keywords = [
            'optimization', 'optimisation', 'algorithm', 'programming',
            'linear programming', 'integer programming', 'convex',
            'machine learning', 'data science', 'operations research',
            'mathematical programming', 'solver', 'constraint',
            'heuristic', 'metaheuristic', 'genetic algorithm',
            'simulated annealing', 'particle swarm', 'gradient descent',
            'neural network', 'deep learning', 'reinforcement learning'
        ]
        
        # Èô§Â§ñ„Ç≠„Éº„ÉØ„Éº„ÉâÔºàÈñ¢ÈÄ£ÊÄß„ÅÆ‰Ωé„ÅÑ„Éã„É•„Éº„Çπ„ÇíÈô§Â§ñÔºâ
        exclude_keywords = [
            'celebrity', 'entertainment', 'sports', 'weather',
            'politics', 'election', 'crime', 'accident', 'war',
            'fashion', 'food', 'travel', 'celebrity', 'gossip'
        ]
        
        news_items = []
        for rss_url in rss_urls:
            try:
                feed = feedparser.parse(rss_url)
                for entry in feed.entries[:10]:  # ÂêÑRSS„Åã„Çâ10‰ª∂„ÉÅ„Çß„ÉÉ„ÇØ
                    title_lower = entry.title.lower()
                    summary_lower = getattr(entry, 'summary', '').lower()
                    combined_text = title_lower + ' ' + summary_lower
                    
                    # Èô§Â§ñ„Ç≠„Éº„ÉØ„Éº„Éâ„ÉÅ„Çß„ÉÉ„ÇØ
                    if any(exclude in combined_text for exclude in exclude_keywords):
                        continue
                    
                    # ÊúÄÈÅ©ÂåñÈñ¢ÈÄ£„Ç≠„Éº„ÉØ„Éº„Éâ„Åß„Éï„Ç£„É´„ÇøÔºà„Çà„ÇäÂé≥ÂØÜÔºâ
                    relevance_score = sum(1 for keyword in optimization_keywords 
                                        if keyword in combined_text)
                    
                    # Èñ¢ÈÄ£Â∫¶„Çπ„Ç≥„Ç¢„Åå2‰ª•‰∏ä„ÅÆË®ò‰∫ã„ÅÆ„ÅøÊé°Áî®
                    if relevance_score >= 2:
                        # Êó•Êú¨ÊôÇÈñì„ÅßÂÖ¨ÈñãÊó•„ÇíÂá¶ÁêÜ
                        published_date = getattr(entry, 'published', '')
                        if published_date:
                            try:
                                pub_dt = datetime.strptime(published_date[:19], '%Y-%m-%dT%H:%M:%S')
                                pub_dt = pytz.utc.localize(pub_dt).astimezone(self.jst)
                                published_jst = pub_dt.strftime('%Y-%m-%d %H:%M JST')
                            except:
                                published_jst = published_date
                        else:
                            published_jst = 'Êó•ÊôÇ‰∏çÊòé'
                        
                        news_items.append({
                            'title': entry.title,
                            'link': entry.link,
                            'published': published_jst,
                            'summary': getattr(entry, 'summary', '')[:300] + "...",
                            'relevance_score': relevance_score
                        })
                        
                        # ÂçÅÂàÜ„Å™Êï∞„ÅÆÈñ¢ÈÄ£„Éã„É•„Éº„Çπ„ÅåÈõÜ„Åæ„Å£„Åü„ÇâÁµÇ‰∫Ü
                        if len(news_items) >= 8:
                            break
                            
            except Exception as e:
                print(f"‚ö†Ô∏è RSSÂèñÂæó„Ç®„É©„Éº ({rss_url}): {e}")
                continue
        
        # Èñ¢ÈÄ£Â∫¶„Çπ„Ç≥„Ç¢È†Ü„Åß„ÇΩ„Éº„Éà
        news_items.sort(key=lambda x: x['relevance_score'], reverse=True)
        news_items = news_items[:5]  # ‰∏ä‰Ωç5‰ª∂„ÅÆ„Åø
        
        print(f"‚úÖ Èñ¢ÈÄ£„Éã„É•„Éº„Çπ {len(news_items)} ‰ª∂„ÇíÂèéÈõÜ„Åó„Åæ„Åó„Åü")
        return news_items
    
    def generate_html_report(self, papers, news_items):
        """Áæé„Åó„ÅÑHTML„É¨„Éù„Éº„Éà„ÇíÁîüÊàê"""
        jst_now = self.get_jst_time()
        
        # HTML„ÉÜ„É≥„Éó„É¨„Éº„Éà
        html_report = f"""
        <!DOCTYPE html>
        <html lang="ja">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Êï∞ÁêÜÊúÄÈÅ©Âåñ Êó•Ê¨°„É¨„Éù„Éº„Éà</title>
            <style>
                body {{
                    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                    line-height: 1.6;
                    margin: 0;
                    padding: 20px;
                    background-color: #f5f5f5;
                    color: #333;
                }}
                .container {{
                    max-width: 800px;
                    margin: 0 auto;
                    background-color: white;
                    border-radius: 10px;
                    box-shadow: 0 4px 6px rgba(0,0,0,0.1);
                    overflow: hidden;
                }}
                .header {{
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    color: white;
                    padding: 30px;
                    text-align: center;
                }}
                .header h1 {{
                    margin: 0;
                    font-size: 28px;
                    font-weight: 300;
                }}
                .header .date {{
                    margin-top: 10px;
                    font-size: 16px;
                    opacity: 0.9;
                }}
                .section {{
                    margin: 20px;
                }}
                .section-title {{
                    font-size: 22px;
                    font-weight: 600;
                    margin: 30px 0 20px 0;
                    padding: 15px;
                    border-radius: 8px;
                    display: flex;
                    align-items: center;
                }}
                .section-title.papers {{
                    background-color: #e3f2fd;
                    border-left: 5px solid #2196f3;
                    color: #1976d2;
                }}
                .section-title.news {{
                    background-color: #fff8e1;
                    border-left: 5px solid #ff9800;
                    color: #f57c00;
                }}
                .item {{
                    background-color: white;
                    border: 1px solid #e0e0e0;
                    border-radius: 8px;
                    margin: 15px 0;
                    padding: 20px;
                    box-shadow: 0 2px 4px rgba(0,0,0,0.05);
                    transition: box-shadow 0.3s ease;
                }}
                .item:hover {{
                    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
                }}
                .item-title {{
                    font-size: 18px;
                    font-weight: 600;
                    margin-bottom: 12px;
                    color: #2c3e50;
                    line-height: 1.4;
                }}
                .item-meta {{
                    display: flex;
                    flex-wrap: wrap;
                    gap: 15px;
                    margin-bottom: 12px;
                    font-size: 14px;
                    color: #666;
                }}
                .meta-item {{
                    display: flex;
                    align-items: center;
                }}
                .meta-label {{
                    font-weight: 600;
                    margin-right: 5px;
                }}
                .abstract {{
                    color: #555;
                    line-height: 1.6;
                    margin-bottom: 15px;
                }}
                .link {{
                    display: inline-block;
                    background-color: #4CAF50;
                    color: white;
                    padding: 8px 16px;
                    text-decoration: none;
                    border-radius: 4px;
                    font-size: 14px;
                    transition: background-color 0.3s ease;
                }}
                .link:hover {{
                    background-color: #45a049;
                }}
                .news-link {{
                    background-color: #ff9800;
                }}
                .news-link:hover {{
                    background-color: #f57c00;
                }}
                .relevance-stars {{
                    color: #ffc107;
                    font-size: 16px;
                }}
                .stats {{
                    background-color: #f8f9fa;
                    border-radius: 8px;
                    padding: 20px;
                    margin: 30px 20px;
                    text-align: center;
                }}
                .stats-grid {{
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
                    gap: 20px;
                    margin-top: 15px;
                }}
                .stat-item {{
                    text-align: center;
                }}
                .stat-number {{
                    font-size: 24px;
                    font-weight: 700;
                    color: #2196f3;
                }}
                .stat-label {{
                    font-size: 14px;
                    color: #666;
                    margin-top: 5px;
                }}
                .footer {{
                    text-align: center;
                    padding: 20px;
                    color: #999;
                    font-size: 12px;
                    border-top: 1px solid #eee;
                }}
                .no-content {{
                    text-align: center;
                    padding: 40px;
                    color: #999;
                    font-style: italic;
                }}
                .emoji {{
                    margin-right: 8px;
                }}
                @media (max-width: 600px) {{
                    .container {{
                        margin: 10px;
                        border-radius: 5px;
                    }}
                    .header {{
                        padding: 20px;
                    }}
                    .header h1 {{
                        font-size: 24px;
                    }}
                    .section {{
                        margin: 15px;
                    }}
                }}
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h1>üî¨ Êï∞ÁêÜÊúÄÈÅ©Âåñ Êó•Ê¨°„É¨„Éù„Éº„Éà</h1>
                    <div class="date">{jst_now.strftime('%YÂπ¥%mÊúà%dÊó• %H:%M')} JST</div>
                </div>
                
                <div class="section">
                    <div class="section-title papers">
                        <span class="emoji">üìö</span>
                        Êñ∞ÁùÄË´ñÊñá ({len(papers)}‰ª∂)
                    </div>
        """
        
        # Ë´ñÊñá„Çª„ÇØ„Ç∑„Éß„É≥
        if papers:
            for i, paper in enumerate(papers, 1):
                authors_str = ', '.join(paper['authors'])
                if len(paper['authors']) > 3:
                    authors_str += " ‰ªñ"
                
                categories_str = ', '.join(paper['categories'][:2])
                
                html_report += f"""
                    <div class="item">
                        <div class="item-title">{i}. {paper['title']}</div>
                        <div class="item-meta">
                            <div class="meta-item">
                                <span class="meta-label">üë• ËëóËÄÖ:</span>
                                {authors_str}
                            </div>
                            <div class="meta-item">
                                <span class="meta-label">üè∑Ô∏è „Ç´„ÉÜ„Ç¥„É™:</span>
                                {categories_str}
                            </div>
                            <div class="meta-item">
                                <span class="meta-label">üìÖ ÂÖ¨ÈñãÊó•:</span>
                                {paper['published']}
                            </div>
                        </div>
                        <div class="abstract">{paper['abstract']}</div>
                        <a href="{paper['url']}" class="link" target="_blank">Ë´ñÊñá„ÇíË™≠„ÇÄ</a>
                    </div>
                """
        else:
            html_report += '<div class="no-content">Êú¨Êó•„ÅØÊñ∞ÁùÄË´ñÊñá„Åå„ÅÇ„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ</div>'
        
        # „Éã„É•„Éº„Çπ„Çª„ÇØ„Ç∑„Éß„É≥
        html_report += f"""
                </div>
                
                <div class="section">
                    <div class="section-title news">
                        <span class="emoji">üì∞</span>
                        Êï∞ÁêÜÊúÄÈÅ©ÂåñÈñ¢ÈÄ£ÊäÄË°ì„Éã„É•„Éº„Çπ ({len(news_items)}‰ª∂)
                    </div>
        """
        
        if news_items:
            for i, news in enumerate(news_items, 1):
                stars = '‚≠ê' * news['relevance_score']
                
                html_report += f"""
                    <div class="item">
                        <div class="item-title">{i}. {news['title']}</div>
                        <div class="item-meta">
                            <div class="meta-item">
                                <span class="meta-label">üéØ Èñ¢ÈÄ£Â∫¶:</span>
                                <span class="relevance-stars">{stars}</span>
                            </div>
                            <div class="meta-item">
                                <span class="meta-label">üìÖ ÂÖ¨ÈñãÊó•:</span>
                                {news['published']}
                            </div>
                        </div>
                        <div class="abstract">{news['summary']}</div>
                        <a href="{news['link']}" class="link news-link" target="_blank">Ë®ò‰∫ã„ÇíË™≠„ÇÄ</a>
                    </div>
                """
        else:
            html_report += '<div class="no-content">Êú¨Êó•„ÅØÈñ¢ÈÄ£„Éã„É•„Éº„Çπ„Åå„ÅÇ„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ</div>'
        
        # Áµ±Ë®à„Çª„ÇØ„Ç∑„Éß„É≥
        html_report += f"""
                </div>
                
                <div class="stats">
                    <h3>üìä ÂèéÈõÜÁµ±Ë®à</h3>
                    <div class="stats-grid">
                        <div class="stat-item">
                            <div class="stat-number">{len(papers)}</div>
                            <div class="stat-label">Ë´ñÊñáÊï∞</div>
                        </div>
                        <div class="stat-item">
                            <div class="stat-number">{len(news_items)}</div>
                            <div class="stat-label">„Éã„É•„Éº„ÇπÊï∞</div>
                        </div>
                        <div class="stat-item">
                            <div class="stat-number">{jst_now.strftime('%H:%M')}</div>
                            <div class="stat-label">ÁîüÊàêÊôÇÂàª (JST)</div>
                        </div>
                    </div>
                </div>
                
                <div class="footer">
                    „Åì„ÅÆ„É¨„Éù„Éº„Éà„ÅØËá™ÂãïÁîüÊàê„Åï„Çå„Åæ„Åó„Åü<br>
                    Êó•Êú¨Ê®ôÊ∫ñÊôÇ (JST) - {jst_now.strftime('%Y-%m-%d %H:%M:%S')}
                </div>
            </div>
        </body>
        </html>
        """
        
        return html_report
    
    def generate_text_report(self, papers, news_items):
        """„ÉÜ„Ç≠„Çπ„ÉàÁâà„É¨„Éù„Éº„Éà„ÇíÁîüÊàêÔºàDiscordÁî®„Å™„Å©Ôºâ"""
        jst_now = self.get_jst_time()
        
        report = f"""
# üî¨ Êï∞ÁêÜÊúÄÈÅ©Âåñ Êó•Ê¨°„É¨„Éù„Éº„Éà
**ÁîüÊàêÊó•ÊôÇ**: {jst_now.strftime('%YÂπ¥%mÊúà%dÊó• %H:%M')} JST

---

## üìö Êñ∞ÁùÄË´ñÊñá ({len(papers)}‰ª∂)

"""
        
        if papers:
            for i, paper in enumerate(papers, 1):
                authors_str = ', '.join(paper['authors'])
                if len(paper['authors']) > 3:
                    authors_str += " ‰ªñ"
                
                report += f"""
### {i}. {paper['title']}

- **ËëóËÄÖ**: {authors_str}
- **„Ç´„ÉÜ„Ç¥„É™**: {', '.join(paper['categories'][:2])}
- **ÂÖ¨ÈñãÊó•**: {paper['published']}
- **Ê¶ÇË¶Å**: {paper['abstract']}
- **URL**: {paper['url']}

---
"""
        else:
            report += "\nÊú¨Êó•„ÅØÊñ∞ÁùÄË´ñÊñá„Åå„ÅÇ„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ\n\n---\n"
        
        report += f"""

## üì∞ Êï∞ÁêÜÊúÄÈÅ©ÂåñÈñ¢ÈÄ£ÊäÄË°ì„Éã„É•„Éº„Çπ ({len(news_items)}‰ª∂)

"""
        
        if news_items:
            for i, news in enumerate(news_items, 1):
                report += f"""
### {i}. {news['title']}

- **Ë¶ÅÁ¥Ñ**: {news['summary']}
- **Èñ¢ÈÄ£Â∫¶**: {'‚≠ê' * news['relevance_score']}
- **„É™„É≥„ÇØ**: {news['link']}
- **ÂÖ¨ÈñãÊó•**: {news['published']}

---
"""
        else:
            report += "\nÊú¨Êó•„ÅØÈñ¢ÈÄ£„Éã„É•„Éº„Çπ„Åå„ÅÇ„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ\n\n---\n"
        
        report += f"""

## üìä ÂèéÈõÜÁµ±Ë®à
- Ë´ñÊñáÊï∞: {len(papers)}‰ª∂
- „Éã„É•„Éº„ÇπÊï∞: {len(news_items)}‰ª∂
- ÁîüÊàêÊôÇÂàª: {jst_now.strftime('%Y-%m-%d %H:%M:%S')} JST

---
*„Åì„ÅÆ„É¨„Éù„Éº„Éà„ÅØËá™ÂãïÁîüÊàê„Åï„Çå„Åæ„Åó„Åü (JST: Japan Standard Time)*
"""
        
        return report
    
    def send_email_report(self, html_report, text_report):
        """HTML„Å®„ÉÜ„Ç≠„Çπ„Éà‰∏°Êñπ„Å´ÂØæÂøú„Åó„Åü„É°„Éº„É´„ÇíÈÄÅ‰ø°"""
        if not all([self.sender_email, self.sender_password, self.recipient_email]):
            print("‚ùå „É°„Éº„É´Ë®≠ÂÆö„Åå‰∏çÂÆåÂÖ®„Åß„Åô")
            return False
        
        try:
            # „Éû„É´„ÉÅ„Éë„Éº„Éà„É°„ÉÉ„Çª„Éº„Ç∏„Çí‰ΩúÊàê
            msg = MIMEMultipart('alternative')
            msg['From'] = self.sender_email
            msg['To'] = self.recipient_email
            jst_now = self.get_jst_time()
            msg['Subject'] = f"üî¨ Êï∞ÁêÜÊúÄÈÅ©Âåñ„É¨„Éù„Éº„Éà - {jst_now.strftime('%Y/%m/%d')} JST"
            
            # „ÉÜ„Ç≠„Çπ„ÉàÁâà„Å®HTMLÁâà„ÅÆ‰∏°Êñπ„ÇíÊ∑ª‰ªò
            text_part = MIMEText(text_report, 'plain', 'utf-8')
            html_part = MIMEText(html_report, 'html', 'utf-8')
            
            msg.attach(text_part)
            msg.attach(html_part)
            
            # SMTPÈÄÅ‰ø°
            server = smtplib.SMTP('smtp.gmail.com', 587)
            server.starttls()
            server.login(self.sender_email, self.sender_password)
            text = msg.as_string()
            server.sendmail(self.sender_email, self.recipient_email, text)
            server.quit()
            
            print("‚úÖ HTML„É°„Éº„É´„ÅßÈÄÅ‰ø°ÂÆå‰∫Ü")
            return True
            
        except Exception as e:
            print(f"‚ùå „É°„Éº„É´ÈÄÅ‰ø°„Ç®„É©„Éº: {e}")
            return False
    
    def send_discord_report(self, report):
        """Discord Webhook„Åß„É¨„Éù„Éº„Éà„ÇíÈÄÅ‰ø°"""
        if not self.discord_webhook:
            print("‚ùå Discord Webhook URL„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì")
            return False
        
        try:
            # Discord„ÅÆÊñáÂ≠óÊï∞Âà∂ÈôêÔºà2000ÊñáÂ≠óÔºâÂØæÂøú
            if len(report) > 1900:
                report = report[:1900] + "\n\n[„É¨„Éù„Éº„Éà„ÅåÈï∑„ÅÑ„Åü„ÇÅÂàá„ÇäË©∞„ÇÅ„Çâ„Çå„Åæ„Åó„Åü]"
            
            payload = {
                "content": f"```markdown\n{report}\n```"
            }
            
            response = requests.post(self.discord_webhook, json=payload)
            if response.status_code == 204:
                print("‚úÖ Discord„Å´ÈÄÅ‰ø°ÂÆå‰∫Ü")
                return True
            else:
                print(f"‚ùå DiscordÈÄÅ‰ø°„Ç®„É©„Éº: HTTP {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå DiscordÈÄÅ‰ø°„Ç®„É©„Éº: {e}")
            return False
    
    def save_report_to_file(self, html_report, text_report):
        """„É¨„Éù„Éº„Éà„Çí„Éï„Ç°„Ç§„É´„Å´‰øùÂ≠òÔºàHTMLÁâà„Å®„ÉÜ„Ç≠„Çπ„ÉàÁâà‰∏°ÊñπÔºâ"""
        jst_now = self.get_jst_time()
        timestamp = jst_now.strftime('%Y%m%d_%H%M')
        
        html_filename = f"report_{timestamp}_JST.html"
        text_filename = f"report_{timestamp}_JST.md"
        
        try:
            # HTMLÁâà„Çí‰øùÂ≠ò
            with open(html_filename, 'w', encoding='utf-8') as f:
                f.write(html_report)
            print(f"‚úÖ HTML„É¨„Éù„Éº„Éà„Çí {html_filename} „Å´‰øùÂ≠ò„Åó„Åæ„Åó„Åü")
            
            # „ÉÜ„Ç≠„Çπ„ÉàÁâà„Çí‰øùÂ≠ò
            with open(text_filename, 'w', encoding='utf-8') as f:
                f.write(text_report)
            print(f"‚úÖ „ÉÜ„Ç≠„Çπ„Éà„É¨„Éù„Éº„Éà„Çí {text_filename} „Å´‰øùÂ≠ò„Åó„Åæ„Åó„Åü")
            
            return html_filename, text_filename
        except Exception as e:
            print(f"‚ùå „Éï„Ç°„Ç§„É´‰øùÂ≠ò„Ç®„É©„Éº: {e}")
            return None, None
    
    def run_daily_collection(self):
        """Êó•Ê¨°ÂèéÈõÜ„Å®„É¨„Éù„Éº„ÉàÁîüÊàê„ÇíÂÆüË°å"""
        jst_now = self.get_jst_time()
        
        print("=" * 50)
        print(f"üöÄ Êó•Ê¨°ÂèéÈõÜÈñãÂßã: {jst_now.strftime('%Y-%m-%d %H:%M:%S')} JST")
        print("=" * 50)
        
        # „Éá„Éº„ÇøÂèéÈõÜ
        papers = self.collect_arxiv_papers(days_back=31)  # ÈÅéÂéª2Êó•ÂàÜ
        news_items = self.collect_news_from_rss()
        
        # „É¨„Éù„Éº„ÉàÁîüÊàêÔºàHTMLÁâà„Å®„ÉÜ„Ç≠„Çπ„ÉàÁâàÔºâ
        html_report = self.generate_html_report(papers, news_items)
        text_report = self.generate_text_report(papers, news_items)
        
        # „É¨„Éù„Éº„Éà‰øùÂ≠ò
        self.save_report_to_file(html_report, text_report)
        
        # „É¨„Éù„Éº„ÉàÈÄÅ‰ø°
        email_sent = self.send_email_report(html_report, text_report)
        discord_sent = self.send_discord_report(text_report)  # Discord„ÅØMarkdownÁâà
        
        print("=" * 50)
        print("üìä ÂÆüË°åÁµêÊûú:")
        print(f"  üìö Ë´ñÊñá: {len(papers)}‰ª∂")
        print(f"  üì∞ „Éã„É•„Éº„Çπ: {len(news_items)}‰ª∂")
        print(f"  üìß HTML„É°„Éº„É´ÈÄÅ‰ø°: {'‚úÖ' if email_sent else '‚ùå'}")
        print(f"  üí¨ DiscordÈÄÅ‰ø°: {'‚úÖ' if discord_sent else '‚ùå'}")
        print(f"  üïê ÂÆüË°åÊôÇÂàª: {jst_now.strftime('%Y-%m-%d %H:%M:%S')} JST")
        print("=" * 50)
        
        return {
            'papers_count': len(papers),
            'news_count': len(news_items),
            'email_sent': email_sent,
            'discord_sent': discord_sent,
            'execution_time_jst': jst_now.strftime('%Y-%m-%d %H:%M:%S JST')
        }

def main():
    """„É°„Ç§„É≥ÂÆüË°åÈñ¢Êï∞"""
    print("üî¨ Êï∞ÁêÜÊúÄÈÅ©ÂåñË´ñÊñá„Éª„Éã„É•„Éº„ÇπÂèéÈõÜ„Ç∑„Çπ„ÉÜ„É† (HTML „É°„Éº„É´ÂØæÂøúÁâà)")
    print("=" * 60)
    
    collector = OptimizationNewsCollector()
    result = collector.run_daily_collection()
    
    # ÁµêÊûú„ÇíJSON„ÅßÂá∫ÂäõÔºàGitHub Actions„Åß„ÅÆÁ¢∫Ë™çÁî®Ôºâ
    print("\nüìÑ ÂÆüË°åÁµêÊûúÔºàJSONÔºâ:")
    print(json.dumps(result, ensure_ascii=False, indent=2))

if __name__ == "__main__":
    main()
